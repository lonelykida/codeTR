
1.重叠代价和拥塞代价
  1.1.轨道重叠代价 = 拥塞的
  1.2.轨道拥塞代价
  1.3.总代价 = 轨道重叠代价 + 轨道拥塞代价
2.线长代价：是一个线网的线长代价，是根据一个线网里边的iroute和pin来算的
  2.1.根据每个net组件构建带权完全图，每个边的权表示两对应net组件间的最短曼哈顿距离
  2.2.从图中找一个最小生成树(MST)来连接所有组件，MST的长度即为线长代价
3.初分配
  3.1.采用贪婪算法來识别其中允许布线之间的重叠的初始TA结果；
  3.2.算法如下:
    --------初分配算法 在一个panel上初分配--------
    输入:panel p，iroute集I(p),轨道集T(p)
    1. 基于iroute的长度非递增排序I(p)
    2. 对于每个iroute ir∈I(p)：
    3.   minCost = ∞  // 记录ir的最小代价
    4.   对每个轨道t∈T(p)：
    5.    wlCost = CalculateWirelengthCost(ir,t)  //计算线长成本
    6.    overlapCost = CalculateOverlapCost(ir,t)  //计算重叠成本
    7.    blkCost = CalculateBlockageCost(ir,t)  //计算阻塞成本
    8.    cost = wlCost + α*overlapCost + β*blkCost  //计算ir在t上的代价
    9.    if cost < minCost:
    10.     minCost = cost  //更新最小代价
    11.     minT = t        //更新最小代价对应的轨道
    12.  将ir分配到minT上
    13.  直到所有iroute都分配完毕
    --------------------------------------------
  3.3.线长成本的计算
    3.3.1.为节省时间，先找到iroute ir和与ir同一net的每个组件间的最毒段曼哈段距离；
    3.3.2.若某些iroute尚未分配轨道，则计算时将其忽略；
    3.3.3.这些所有的距离中最小的一个被用作该种可能的TA的线长成本；
  3.4.重叠成本的计算，通过1、2中的方法计算重叠成本和阻塞成本
  3.5.为了在三种成本之间取得平衡，采取了等式：
    总成本 = wlCost + α*overlapCost + β*blkCost
    α被设置为0.1，β被设置为非常大的数，以尽可能避免与阻塞产生重叠，p的非常大的数字
    使得该阶段产生具有最小阻塞成本的结果；另外将α设为0.1，使初始分配阶段更重视减少线长而
    非重叠成本。
    初始分配阶段产生具有较短线长但重叠成本较高的解决方案，这问题将在下一节重叠成本减少中解决。
4.重叠减少阶段
  4.1.采用协商方案来拆线重布，以尽可能多地消除重叠；
  4.2.算法如下:
    --------重叠减少算法 在一个panel上减少重叠--------
    输入:panel p，已分配的iroute集I(p),轨道集T(p)
    1. CalculateIrouteCost()计算每个iroute的成本
    2. repeat:
    3.   rmax = SelectMaxCostIRoute(I(p))  //选择代价最大的iroute
    4.   RipupIroute(rmax)  //拆线
    5.   tmin = FindMinCostTrack(rmax,T(p)) //试探性地分配给每个轨道，并找到最小成本轨道tmin
    6.   将rmax分配给tmin,并更新tmin上每个iroute的成本
    7.   更新tmin的历史成本
    8. 迭代直到满足终止条件
    -----------------------------------------------
  4.2.1.选择重布的代价最大的iroute方法:
    overlapCost(ir, t) + historyCost(ir, t)
    overlapCost(ir, t):当ir从其原始轨道t上移除时，减少的重叠代价
    historyCost(ir, t):表示t上的irouteir所覆盖的所有单位区间的历史成本之和
  4.2.2.为了避免重复地分离和重新分配同一组iroute，一旦iroute被分离和重新分配，
    该iroute将被冻结f次迭代，然后再次成为iroute选择的候选者(f=20)
  4.2.3.iroute重分配:
    0.1*wlCost(ir, t) + α1*overlapCost(ir, t)+β*blkCost(ir, t)+historyCost(ir, t)
    wlCost(ir, t):当ir分配给轨道t时与ir相关联的net的线长代价
    overlapCost(ir, t)和blkCost(ir, t):当ir分配给轨道t时，t上的重叠成本和阻塞成本的增加量
    historyCost(ir, t):当ir分配给轨道t时，由ir覆盖的所有单位区间的历史成本的总和
    α1:重分配开始时设置为0.1，并在每abs(I(p))/k轮后增加0.1，I(p)是每个panel p中的iroute数量，
    k被设置为10；
    β:是一个很大的数


--------------下边是代码流程--------------
FlexTA.cpp开始：
init(); //初始化，准备数据和结构
  先初始化查询区域，接着再初始化轨道，轨道初始化完成后初始化iroute，同时还会根据TAIter的不同，决定
  是否初始化FixedObjs，或决定是否会先对iroute进行排序，在下边的代码流程中这些不确定的流程会在开头用
  *号标识
  rq.init();  //区域查询的初始化
  initTracks(); //初始化轨道
  *initFixedObjs();
  initIroutes();  //初始化iroute
    对每一个布线层进行查询，若不是布线层会跳过，在布线层中，先查询该层中的所有guide，接着再根据每一个guide
    对iroute进行初始化，初始化执行的是下边的函数：
    initIroute(guide);
      1.构造一个iroute空指针，将guide、guide边界框和guide所属金属层都获取到，并将guide记录到iroute中；
      2.若guide在布线区域中，则看当前guide有没有需要布线的线，若无布线线，则说明无布线需求，直接返回；
      3.接着更新上下通孔的坐标集合(downViaCoordSet和UpViaCoordSet)，这两个集合其实就是当布线层有除了当前层以外
        的iroute，那么该层就会被记到这个集合里去；
        更新是通过函数来更行的：
        initIroute_helper(guide, maxBegin, minEnd, downViaCoordSet, upViaCoordSet, wlen, wlen2);
        这里边包含两个函数，分别是针对pin初始化的函数1以及针对通常情况初始化的函数2，如下：
        函数1：
        initIroute_helper_pin(guide, maxBegin, minEnd, downViaCoordSet, upViaCoordSet, wlen, wlen2)
          进来就判断当前guide的起终点是否一样，应该是判断当前guide记录的是否是pin，如果不同就不是pin，那就会返回false，
          只要返回false就执行函数2；否则的话就在整个函数中找当前层的布线区域内的访问点，找到后更新完参数就返回true；
          若没找到就返回false，只要返回false就执行函数2；
          1.若起终点不同，则返回false，应该是表示不是pin；
          2.获取guide所属线网、层号以及是否水平；同时维护两个变量hasDown和hasUp表示是否在当前层的上下层还有其他iroute；
          3.找到guide起终点包围起来的边界框box，接着在当前层的下两层和上两层上分别查找guide文件，并判断是否有当前布线线网的iroute；
            若有的话更新hasUp和hasDown；
          4.接着查找GRPin，其实看结果就是找所有的Term块(存放pin的)，将其放到result数组中；
          5.接着在每一个term中开始玩儿遍历，找是否有属于当前net的term，并将其记为trueTerm；
          6.在找到trueTerm后，也就是包含当前net的Term后，在Term中遍历每一个pin；
            若当前pin有实例，则根据pinIdx获取其访问点ap，pinIdx是pin的索引，从0开始，找到一个就+1；
            否则若无实例，则也无访问点，直接看下一个pin；
          7.对有访问点，若当前访问点的层就在布线层区域内，且在同一层，则更新wlen2 = 访问点的y坐标(水平)，否则为x坐标；
            同时更新maxBegin=访问点的x(水平)或访问点的y(垂直)；
            minEND和maxBegin一样；
          8.若还有上层iroute或者下层iroute，则将maxBegin，也就是访问点的x(水平)或y(垂直)放到downViaCoordSet或UpViaCoordSet里；
            若执行了第7、8步，则直接返回true，否则继续找；
        函数2：
        initIroute_helper_generic(guide, maxBegin, minEnd, downViaCoordSet, upViaCoordSet, wlen, wlen2)
      4.更新完成后找到guide中的布线段，并记录其起终点，在代码中看到是随机找的一个布线段，及要布的轨道坐标；
      5.接着把布线段的起终点按布线方向放到临时变量rptr中去，并设置其所属的金属层和线段类型，最后将其放到iroute的PinFig数组中；
        到此基本上布线段就确定好了，下边就是从上层通孔坐标集(upViaCoordSet)和下层通孔坐标集(downViaCoordSet)中
        取出每一个需要打通孔的坐标，接着生成对应的通孔对象，并放到iroute中去；
      6.最后设置当前iroute的线长Wlen以及Wlen2；并将当前iroute加到iroutes集合中；
  *initCosts();   //初始化cost
  *sortIroutes(); //对iroute进行排序
assign(); //执行分配任务
  将重分配队列中的iroute拿出来，这个重分配队列应该是可以重用的，第一次分配和重分配的iroute都在里边；
  另外再搞个buffer缓冲区，用来记录哪些iroute已经被分配过了，避免重复分配；
  接着就开始循环把重分配队列中的iroute一个一个拿来分配；
  最后分配完了再将其记录到buffer中，并将已分配的iroute数量+1，这个计数变量也是buffer的计数指针(类似栈顶)
  分配函数如下:
  assignIroute(把iroute传入)
    在分配过程中，会创建一个pinS集合，用来存放iroute，首先根据当前iroute初始化pinS，接着再找到当前
    iroute可以用的轨道的范围，接着再从这些轨道中找到最佳轨道将其分配给iroute，最后更新iroute的最优轨道坐标
    和其他iroute的坐标及cost
    assignIroute_init(iroute,pinS);                   //1.初始化iroute相关的pinS集合
      对iroute中的每个形状，将其从查询区域中移除，接着再修改该形状在pinS中的成本；
      最后从总成本中扣除当前iroute的成本；
      在该过程中，修改形状在pinS中的成本函数为:
      subCost(uPinFig.get(), pinS);
        会调用函数：
        modeCost(pinFig，是否增加成本，pinS)
          1.若当前形状pinFig是路径：
            获取当前形状的真实指针，接着获取该形状所在的层和形状边界box；
            接着修改了一大堆成本，不过不知道是什么东西：
            //modMinSpacingCostPlanar(当前形状所在层边界,层号, pin指针, isAddCost, pinS); // must be current TA layer
            modMinSpacingCostPlanar(box, layerNum, obj, isAddCost, pinS); // must be current TA layer
              看样子像修改最小间距约束，
            //modMinSpacingCostVia(box, layerNum, obj, isAddCost,是否upperVia,是否CurrPs, pinS);
            modMinSpacingCostVia(box, layerNum, obj, isAddCost, true , true, pinS);
            modMinSpacingCostVia(box, layerNum, obj, isAddCost, false, true, pinS);
          2.若当前形状pinFig是通孔：
            2.1.获取当前通孔对象实际指针、通孔上层的边界box和层号；
            2.2.若当前布线方向是该层的优先布线方向，则修改SpacingCostPlanar，和1中的第一个函数一样
            2.3.接着修改MinSpacingCostVia，和1中的后两个函数一样
            2.4.获取当前通孔对象的下层的边界box和层号；
            2.5.若当前布线方向是该层的优先布线方向，则修改SpacingCostPlanar，和1中的第一个函数一样
            2.6.接着修改MinSpacingCostVia，和1中的后两个函数一样
          3.若不是上述两种形状，则出错。
    assignIroute_availTracks(iroute,lNum,idx1,idx2);  //2.找到iroute可用轨道范围idx1和idx2；
      先找到当前iroute的起终点，并根据起终点获取到irote所属的Gcell(通过索引)，接着再找到当前Gcell的边界，这
      是找寻的前提条件；接着判断当前iroute的横纵方向，根据纵横方向确定当前Gcell的轨道边界，轨道边界就是Gcell
      边界的上下或左右边框；
      接着根据轨道边界的上下界查询当前层轨道的索引范围，获取轨道的详细索引，将其分配给idx1和idx2；
      getTrackIdx(Low,High,lNum,idx1,idx2);//根据上下边界获取轨道的索引
    assignIroute_bestTrack(iroute,lNum,idx1,idx2);    //3.找到最佳轨道并分配
      分当前的iroute是否是pin；
      3.1.若是pin的话：
        3.1.1.若Wlen1大于0：
          首先确定起始轨道坐标(在idx1和idx2中间)；
          确定好了后试着把iroute分配给从起始坐标开始到idx2的每一个轨道，直到找到一个无DRC的轨道；
          若都有DRC，则尝试从起始坐标到idx1的方向再次分配，找是否有无DRC的轨道；
        3.1.2.若Wlen==0：
          则起始轨道仍然从中间某个位置开始，遍历idx2-idx1次，依次往左、往右地震荡分配，跟哈希表的二次探测类似；
        3.1.3.若Wlen<0：
          从开始位置先往idx1的方向找无DRC的轨道；若找不到合适轨道，则再从开始位置+1的位置，往idx2方向继续找；
        综上，Wlen变量的意义就是为了确定找的方向和顺序；
        上边三步找最优轨道用的函数都是:
        assignIroute_bestTrack_helper(iroute, lNum, i, bestCost, bestTrackLoc, bestTrackIdx, drcCost);
          传入的参数是iroute及其层号，以及轨道i，同时要更新bestCost、bestTrackLoc、bestTrackIdx和drcCost；
          先获取当前iroute要分配到的轨道的实际位置，当位置确定了后，计算该iroute分配过去后的currCost，若currCost
          比当前最好的Cost还要更优，则更新对应的最优轨道和最优代价；
          此时调用的是：assignIroute_getCost(iroute,trackLoc,drcCost)函数
          assignIroute_getCost(iroute,trackLoc,drcCost)
            该函数传入的是当前待分配的iroute，要分配的轨道的实际位置及drcCost；
            1.先获取当前iroute层的pitch，应该是金属宽度？ - irouteLayerPitch
            2.接着计算ir分配到轨道t后的代价:
            outDrcCost = assiginIroute_getDRCCost(iroute,trackLoc);
            3.若ta还未执行，则DRC代价是outDrcCost的0.05倍，否则是其32倍；
            4.计算将ir分配到轨道t后的线长代价:
            wlenCost = assignIroute_getWlenCost(iroute,trackLoc);
            5.计算将ir分配到轨道t后的pin代价：
            tmpPinCost = assignIroute_getPinCost(iroute,trackLoc);
            若计算出来的tmpPinCost是0，则真正的pinCost = 0,否则=irouteLayerPitch*4+tmpPinCost;
            6.计算tmpAlignCost，应该是对齐代价?
            tmpAlignCost = assignIroute_getAlignCost(iroute,trackLoc);
            若tmpAlignCost = 0,则真正的AlignCost = 0，否则=4*irouteLayerPitch+tmpAlignCost;
            7.最后返回(drcCost+wlenCost+pinCost-alignCost)和(0)相比的最大值
      3.2.若不是pin的话：
        3.2.1.若Wlen>0，则从idx2开始一直找到idx1;
        3.2.2.若Wlen==0,则i从idx1和idx2的中间开始，先从中间往idx2的位置找，若未找到无DRC的轨道，则从中间开始
          再往idx1的方向找，直到找到无DRC的轨道；
        3.2.3.若Wlen<0，则从idx1开始往后找，一直找到idx2的位置；
        上边三步找轨道用的函数也是和3.1中的函数一样
      3.3.最后：
        若没找到匹配的轨道，则输出错误信息，然后exit(1)；
        否则把drc代价加到总的代价里面去，再设置当前iroute的drc代价，最后返回最优轨道的坐标；
    assignIroute_updateIroute(iroute,bestTrack,pinS); //4.更新iroute的最优轨道坐标
    assignIroute_updateOthers(pinS);                  //5.更新pinS集合中的其他iroute的坐标和cost
end();    //执行收尾任务